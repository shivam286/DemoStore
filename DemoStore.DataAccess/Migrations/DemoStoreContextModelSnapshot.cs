// <auto-generated />
using System;
using DemoStore.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoStore.DataAccess.Migrations
{
    [DbContext(typeof(DemoStoreContext))]
    partial class DemoStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveAdminComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("author_type");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Namespace")
                        .HasColumnType("TEXT")
                        .HasColumnName("namespace");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("resource_id");

                    b.Property<string>("ResourceType")
                        .HasColumnType("TEXT")
                        .HasColumnName("resource_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("active_admin_comments_pkey");

                    b.HasIndex(new[] { "AuthorType", "AuthorId" }, "index_active_admin_comments_on_author_type_and_author_id");

                    b.HasIndex(new[] { "Namespace" }, "index_active_admin_comments_on_namespace");

                    b.HasIndex(new[] { "ResourceType", "ResourceId" }, "index_active_admin_comments_on_resource_type_and_resource_id");

                    b.ToTable("active_admin_comments", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("BlobId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("blob_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("RecordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("record_id");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("record_type");

                    b.HasKey("Id")
                        .HasName("active_storage_attachments_pkey");

                    b.HasIndex(new[] { "BlobId" }, "index_active_storage_attachments_on_blob_id");

                    b.HasIndex(new[] { "RecordType", "RecordId", "Name", "BlobId" }, "index_active_storage_attachments_uniqueness")
                        .IsUnique();

                    b.ToTable("active_storage_attachments", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageBlob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("ByteSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("byte_size");

                    b.Property<string>("Checksum")
                        .HasColumnType("TEXT")
                        .HasColumnName("checksum");

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("filename");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT")
                        .HasColumnName("metadata");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("service_name");

                    b.HasKey("Id")
                        .HasName("active_storage_blobs_pkey");

                    b.HasIndex(new[] { "Key" }, "index_active_storage_blobs_on_key")
                        .IsUnique();

                    b.ToTable("active_storage_blobs", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageVariantRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("BlobId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("blob_id");

                    b.Property<string>("VariationDigest")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("variation_digest");

                    b.HasKey("Id")
                        .HasName("active_storage_variant_records_pkey");

                    b.HasIndex(new[] { "BlobId", "VariationDigest" }, "index_active_storage_variant_records_uniqueness")
                        .IsUnique();

                    b.ToTable("active_storage_variant_records", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("TEXT")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT")
                        .HasColumnName("address_line_2");

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("Landmark")
                        .HasColumnType("TEXT")
                        .HasColumnName("landmark");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Pincode")
                        .HasColumnType("TEXT")
                        .HasColumnName("pincode");

                    b.Property<long?>("PosUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_user_id");

                    b.Property<string>("State")
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<int?>("StateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("addresses_pkey");

                    b.HasIndex(new[] { "PosUserId" }, "index_addresses_on_pos_user_id");

                    b.ToTable("addresses", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.AdminUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::TEXT");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''::TEXT");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("reset_password_token");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("admin_users_pkey");

                    b.HasIndex(new[] { "Email" }, "index_admin_users_on_email")
                        .IsUnique();

                    b.HasIndex(new[] { "ResetPasswordToken" }, "index_admin_users_on_reset_password_token")
                        .IsUnique();

                    b.ToTable("admin_users", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ArInternalMetadatum", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("ar_internal_metadata_pkey");

                    b.ToTable("ar_internal_metadata", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.AraskJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExecuteAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("execute_at");

                    b.Property<string>("Interval")
                        .HasColumnType("TEXT")
                        .HasColumnName("interval");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT")
                        .HasColumnName("job");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("arask_jobs_pkey");

                    b.HasIndex(new[] { "ExecuteAt" }, "index_arask_jobs_on_execute_at");

                    b.ToTable("arask_jobs", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("BannerType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banner_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("banners_pkey");

                    b.ToTable("banners", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.BannerItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("BannerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banner_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("banner_items_pkey");

                    b.ToTable("banner_items", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("brands_pkey");

                    b.ToTable("brands", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("address_id");

                    b.Property<decimal?>("AppliedDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("applied_discount")
                        .HasDefaultValueSql("0.0");

                    b.Property<string>("CartToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("cart_token");

                    b.Property<long?>("CartableId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cartable_id");

                    b.Property<string>("CartableType")
                        .HasColumnType("TEXT")
                        .HasColumnName("cartable_type");

                    b.Property<int?>("CouponId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percent");

                    b.Property<string>("DiscountType")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_type");

                    b.Property<decimal?>("ShippingCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("shipping_charge")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("TEXT")
                        .HasColumnName("sub_total");

                    b.Property<decimal?>("Total")
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("total_tax")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("TotalWithTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("total_with_tax")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("TotalWithoutDiscount")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_without_discount");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("carts_pkey");

                    b.HasIndex(new[] { "CartableType", "CartableId" }, "index_carts_on_cartable");

                    b.HasIndex(new[] { "UserId" }, "index_carts_on_user_id");

                    b.ToTable("carts", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("CartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_without_tax");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_name");

                    b.Property<long?>("ProductableId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("productable_id");

                    b.Property<string>("ProductableType")
                        .HasColumnType("TEXT")
                        .HasColumnName("productable_type");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("tax_amount")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_price");

                    b.Property<decimal?>("TotalWithoutDiscount")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_without_discount");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("cart_items_pkey");

                    b.HasIndex(new[] { "ProductableId", "ProductableType" }, "index_cart_items_on_productable_id_and_productable_type");

                    b.ToTable("cart_items", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.CategoriesProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("categories_products_pkey");

                    b.HasIndex(new[] { "CategoryId" }, "index_categories_products_on_category_id");

                    b.HasIndex(new[] { "ProductId" }, "index_categories_products_on_product_id");

                    b.ToTable("categories_products", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.ToTable("categories", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("StateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("cities_pkey");

                    b.ToTable("cities", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.CmsPage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("cms_pages_pkey");

                    b.ToTable("cms_pages", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FullPhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("full_phone_number");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("contacts_pkey");

                    b.ToTable("contacts", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<int?>("CouponType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expire_at");

                    b.Property<decimal?>("MaxCartValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("max_cart_value");

                    b.Property<decimal?>("MinCartValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("min_cart_value");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("PerUserUsage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("per_user_usage")
                        .HasDefaultValueSql("1");

                    b.Property<long?>("PosUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_user_id");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsageCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("usage_count");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("usage_limit");

                    b.HasKey("Id")
                        .HasName("coupons_pkey");

                    b.HasIndex(new[] { "PosUserId" }, "index_coupons_on_pos_user_id");

                    b.ToTable("coupons", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.CouponsUser", b =>
                {
                    b.Property<long?>("CouponId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "CouponId" }, "index_coupons_users_on_coupon_id");

                    b.HasIndex(new[] { "UserId" }, "index_coupons_users_on_user_id");

                    b.ToTable("coupons_users", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.DemoRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("BuisnessName")
                        .HasColumnType("TEXT")
                        .HasColumnName("buisness_name");

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("mobile_number");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("demo_requests_pkey");

                    b.ToTable("demo_requests", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT")
                        .HasColumnName("subject");

                    b.Property<string>("TemplateName")
                        .HasColumnType("TEXT")
                        .HasColumnName("template_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("email_templates_pkey");

                    b.ToTable("email_templates", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Faq", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .HasColumnType("TEXT")
                        .HasColumnName("answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT")
                        .HasColumnName("question");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("faqs_pkey");

                    b.ToTable("faqs", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ImportProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("import_products_pkey");

                    b.ToTable("import_products", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Presentation")
                        .HasColumnType("TEXT")
                        .HasColumnName("presentation");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("option_types_pkey");

                    b.ToTable("option_types", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OptionTypesProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("OptionTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("option_type_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("option_types_products_pkey");

                    b.ToTable("option_types_products", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Display")
                        .HasColumnType("TEXT")
                        .HasColumnName("display");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("OptionTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("option_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("option_values_pkey");

                    b.ToTable("option_values", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OptionValuesVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("OptionValueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("option_value_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("VariantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("variant_id");

                    b.HasKey("Id")
                        .HasName("option_values_variants_pkey");

                    b.ToTable("option_values_variants", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long?>("AdminUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("admin_user_id");

                    b.Property<decimal?>("AppliedDiscount")
                        .HasColumnType("TEXT")
                        .HasColumnName("applied_discount");

                    b.Property<string>("Awb")
                        .HasColumnType("TEXT")
                        .HasColumnName("awb");

                    b.Property<int?>("Breadth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("breadth");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CartId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cart_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<int?>("CouponId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("delivered_at");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_percent");

                    b.Property<string>("DiscountType")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount_type");

                    b.Property<decimal?>("DueAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("due_amount")
                        .HasDefaultValueSql("0.0");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<int?>("Length")
                        .HasColumnType("INTEGER")
                        .HasColumnName("length");

                    b.Property<DateTime?>("OutForDeliveryAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("out_for_delivery_at");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<string>("PaymentMerchant")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_merchant");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.Property<DateTime?>("PlacedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("placed_at");

                    b.Property<bool?>("PosOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_order")
                        .HasDefaultValueSql("false");

                    b.Property<long?>("PosUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_user_id");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("refunded_at");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("returned_at");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("shipped_at");

                    b.Property<decimal?>("ShippingCharge")
                        .HasColumnType("TEXT")
                        .HasColumnName("shipping_charge");

                    b.Property<string>("ShippmentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("shippment_id");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("TEXT")
                        .HasColumnName("sub_total");

                    b.Property<decimal?>("Total")
                        .HasColumnType("TEXT")
                        .HasColumnName("total");

                    b.Property<decimal?>("TotalTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_tax");

                    b.Property<decimal?>("TotalWithTax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("total_with_tax")
                        .HasDefaultValueSql("0.0");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("TEXT")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex(new[] { "AdminUserId" }, "index_orders_on_admin_user_id");

                    b.HasIndex(new[] { "PosUserId" }, "index_orders_on_pos_user_id");

                    b.ToTable("orders", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OrderAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("TEXT")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT")
                        .HasColumnName("address_line_2");

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("Landmark")
                        .HasColumnType("TEXT")
                        .HasColumnName("landmark");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("mobile_number");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<string>("Pincode")
                        .HasColumnType("TEXT")
                        .HasColumnName("pincode");

                    b.Property<string>("State")
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<int?>("StateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("order_addresses_pkey");

                    b.ToTable("order_addresses", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_without_tax");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_name");

                    b.Property<long?>("ProductableId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("productable_id");

                    b.Property<string>("ProductableType")
                        .HasColumnType("TEXT")
                        .HasColumnName("productable_type");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("tax_amount")
                        .HasDefaultValueSql("0.0");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_price");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("order_items_pkey");

                    b.ToTable("order_items", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("order_statuses_pkey");

                    b.ToTable("order_statuses", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMerchant")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_merchant");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("payments_pkey");

                    b.ToTable("payments", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiSecret")
                        .HasColumnType("TEXT")
                        .HasColumnName("api_secret");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("Name")
                        .HasColumnType("INTEGER")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("payment_methods_pkey");

                    b.ToTable("payment_methods", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.PosUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::TEXT");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''::TEXT");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''::TEXT");

                    b.HasKey("Id")
                        .HasName("pos_users_pkey");

                    b.HasIndex(new[] { "ResetPasswordToken" }, "index_pos_users_on_reset_password_token")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "index_pos_users_on_username")
                        .IsUnique();

                    b.ToTable("pos_users", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("TEXT")
                        .HasColumnName("average_rating");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("bar_code");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("brand_id");

                    b.Property<decimal?>("ComparePrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("compare_price");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("HsnCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("hsn_code");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal?>("PriceWithTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_with_tax");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_without_tax");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("sell_price");

                    b.Property<string>("Sku")
                        .HasColumnType("TEXT")
                        .HasColumnName("sku");

                    b.Property<int?>("StockQty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stock_qty");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("TEXT")
                        .HasColumnName("tax_amount");

                    b.Property<int?>("TaxId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tax_id");

                    b.Property<int?>("TaxType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tax_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("products_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "index_products_on_deleted_at");

                    b.ToTable("products", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<bool?>("ShowProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("show_property")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("properties_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "index_properties_on_deleted_at");

                    b.ToTable("properties", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.PublicContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("public_contacts_pkey");

                    b.ToTable("public_contacts", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_item_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("TEXT")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("reviews_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "index_reviews_on_deleted_at");

                    b.ToTable("reviews", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("TEXT")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ShipRocketRaw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Payload")
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("ship_rocket_raws_pkey");

                    b.ToTable("ship_rocket_raws", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ShippingCharge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("Charge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("charge");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("LessThan")
                        .HasColumnType("INTEGER")
                        .HasColumnName("less_than");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("shipping_charges_pkey");

                    b.ToTable("shipping_charges", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ShippingMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("shipping_methods_pkey");

                    b.ToTable("shipping_methods", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("GstCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("gst_code");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("states_pkey");

                    b.ToTable("states", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long?>("Phone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone");

                    b.Property<string>("Subdomain")
                        .HasColumnType("TEXT")
                        .HasColumnName("subdomain");

                    b.Property<long?>("SubscriptionPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subscription_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("stores_pkey");

                    b.HasIndex(new[] { "SubscriptionPlanId" }, "index_stores_on_subscription_plan_id");

                    b.ToTable("stores", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.StoreDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("OrderBalance")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_balance");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("RazorpayCustId")
                        .HasColumnType("TEXT")
                        .HasColumnName("razorpay_cust_id");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT")
                        .HasColumnName("store_name");

                    b.Property<string>("Subdomain")
                        .HasColumnType("TEXT")
                        .HasColumnName("subdomain");

                    b.Property<DateOnly?>("SubscriptionDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("subscription_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("store_details_pkey");

                    b.ToTable("store_details", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.StoreSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<bool?>("AllowCashOnDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_cash_on_delivery")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("AllowDuePayments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("allow_due_payments")
                        .HasDefaultValueSql("false");

                    b.Property<string>("BackgroundColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("background_color")
                        .HasDefaultValueSql("'#000000'::TEXT");

                    b.Property<string>("BorderColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("border_color")
                        .HasDefaultValueSql("'#000000'::TEXT");

                    b.Property<string>("BulkgateAppId")
                        .HasColumnType("TEXT")
                        .HasColumnName("bulkgate_app_id");

                    b.Property<string>("BulkgateAppToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("bulkgate_app_token");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_code");

                    b.Property<string>("CustomerCareNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("customer_care_number");

                    b.Property<string>("CustomerSupportEmail")
                        .HasColumnType("TEXT")
                        .HasColumnName("customer_support_email");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("facebook_url");

                    b.Property<string>("FirebaseKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("firebase_key");

                    b.Property<string>("GstNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("gst_number");

                    b.Property<string>("HoverColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("hover_color")
                        .HasDefaultValueSql("'#CCCCCC'::TEXT");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("instagram_url");

                    b.Property<string>("MailFromAddress")
                        .HasColumnType("TEXT")
                        .HasColumnName("mail_from_address");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NewOrderNotificationsEmail")
                        .HasColumnType("TEXT")
                        .HasColumnName("new_order_notifications_email");

                    b.Property<bool?>("PrintA4Format")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("print_a4_format")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("StateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("state_id");

                    b.Property<string>("TextColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("text_color")
                        .HasDefaultValueSql("'#FFFFFF'::TEXT");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("twitter_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("youtube_url");

                    b.HasKey("Id")
                        .HasName("store_settings_pkey");

                    b.ToTable("store_settings", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.SubCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sub_categories_pkey");

                    b.ToTable("sub_categories", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Subscriber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("subscribers_pkey");

                    b.ToTable("subscribers", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("ExpireAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("expire_at");

                    b.Property<string>("RazorpayPaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("razorpay_payment_id");

                    b.Property<string>("RazorpaySubsId")
                        .HasColumnType("TEXT")
                        .HasColumnName("razorpay_subs_id");

                    b.Property<DateOnly?>("StartAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_at");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<long?>("StoreDetailId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("store_detail_id");

                    b.Property<long?>("SubscriptionPlanId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subscription_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("subscriptions_pkey");

                    b.HasIndex(new[] { "StoreDetailId" }, "index_subscriptions_on_store_detail_id");

                    b.HasIndex(new[] { "SubscriptionPlanId" }, "index_subscriptions_on_subscription_plan_id");

                    b.ToTable("subscriptions", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.SubscriptionPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<double?>("Amount")
                        .HasColumnType("REAL")
                        .HasColumnName("amount");

                    b.Property<int?>("BillingCycle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("billing_cycle");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("OrdersAllowed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("orders_allowed");

                    b.Property<string>("Period")
                        .HasColumnType("TEXT")
                        .HasColumnName("period");

                    b.Property<string>("PlanName")
                        .HasColumnType("TEXT")
                        .HasColumnName("plan_name");

                    b.Property<string>("RazorpayPlanId")
                        .HasColumnType("TEXT")
                        .HasColumnName("razorpay_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("subscription_plans_pkey");

                    b.ToTable("subscription_plans", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Taxis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("TEXT")
                        .HasColumnName("tax_percentage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("taxes_pkey");

                    b.ToTable("taxes", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool?>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("activated")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FullPhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("full_phone_number");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PasswordDigest")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_digest");

                    b.Property<DateTime?>("PasswordResetSentAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_reset_sent_at");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT")
                        .HasColumnName("pin");

                    b.Property<string>("StripeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("stripe_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("bar_code");

                    b.Property<decimal?>("ComparePrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("compare_price");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("HsnCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("hsn_code");

                    b.Property<decimal?>("PriceWithTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_with_tax");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("TEXT")
                        .HasColumnName("price_without_tax");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("TEXT")
                        .HasColumnName("sell_price");

                    b.Property<string>("Sku")
                        .HasColumnType("TEXT")
                        .HasColumnName("sku");

                    b.Property<int?>("StockQty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stock_qty");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("TEXT")
                        .HasColumnName("tax_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("variants_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "index_variants_on_deleted_at");

                    b.ToTable("variants", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<long?>("PosUserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pos_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("wishlists_pkey");

                    b.HasIndex(new[] { "PosUserId" }, "index_wishlists_on_pos_user_id");

                    b.HasIndex(new[] { "UserId" }, "index_wishlists_on_user_id");

                    b.ToTable("wishlists", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.WishlistItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<long?>("WishlistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wishlist_id");

                    b.HasKey("Id")
                        .HasName("wishlist_items_pkey");

                    b.HasIndex(new[] { "DeletedAt" }, "index_wishlist_items_on_deleted_at");

                    b.HasIndex(new[] { "WishlistId" }, "index_wishlist_items_on_wishlist_id");

                    b.ToTable("wishlist_items", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ZipCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("Charge")
                        .HasColumnType("INTEGER")
                        .HasColumnName("charge");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int?>("PriceLessThan")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price_less_than");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("zip_codes_pkey");

                    b.ToTable("zip_codes", "sonusingh2");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageAttachment", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.ActiveStorageBlob", "Blob")
                        .WithMany("ActiveStorageAttachments")
                        .HasForeignKey("BlobId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_c3b3935057");

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageVariantRecord", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.ActiveStorageBlob", "Blob")
                        .WithMany("ActiveStorageVariantRecords")
                        .HasForeignKey("BlobId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_993965df05");

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Address", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.PosUser", "PosUser")
                        .WithMany("Addresses")
                        .HasForeignKey("PosUserId")
                        .HasConstraintName("fk_rails_7c211ff7d1");

                    b.Navigation("PosUser");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Cart", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_ea59a35211");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Coupon", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.PosUser", "PosUser")
                        .WithMany("Coupons")
                        .HasForeignKey("PosUserId")
                        .HasConstraintName("fk_rails_73f7d018f8");

                    b.Navigation("PosUser");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Order", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.AdminUser", "AdminUser")
                        .WithMany("Orders")
                        .HasForeignKey("AdminUserId")
                        .HasConstraintName("fk_rails_1ec7454755");

                    b.HasOne("DemoStore.DataAccess.Models.PosUser", "PosUser")
                        .WithMany("Orders")
                        .HasForeignKey("PosUserId")
                        .HasConstraintName("fk_rails_254aa60568");

                    b.Navigation("AdminUser");

                    b.Navigation("PosUser");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.Wishlist", b =>
                {
                    b.HasOne("DemoStore.DataAccess.Models.PosUser", "PosUser")
                        .WithMany("Wishlists")
                        .HasForeignKey("PosUserId")
                        .HasConstraintName("fk_rails_860b77682f");

                    b.Navigation("PosUser");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.ActiveStorageBlob", b =>
                {
                    b.Navigation("ActiveStorageAttachments");

                    b.Navigation("ActiveStorageVariantRecords");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.AdminUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.PosUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Coupons");

                    b.Navigation("Orders");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("DemoStore.DataAccess.Models.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
